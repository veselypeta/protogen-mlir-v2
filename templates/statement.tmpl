{# print a murphi statement: expects a StatementDescription #}
{% if typeId == "assignment" %}
{{ render_template("expression.tmpl", statement.lhs) }} := {{ render_template("expression.tmpl", statement.rhs) -}};{# -#}
{% endif %}
{% if typeId == "assert" %}
assert( {{ render_template("expression.tmpl", statement.expr) }} ) "{{ statement.msg }}";{# -#}
{% endif %}
{% if typeId == "for" %}
{{ render_template("for_stmt.tmpl", statement) }};{# -#}
{% endif %}
{% if typeId == "if" %}
{{ render_template("if_stmt.tmpl", statement) }};{# -#}
{% endif %}
{% if typeId == "undefine" %}
undefine {{ render_template("expression.tmpl", statement.value) }};{# -#}
{% endif %}
{% if typeId == "proc_call" %}
{{ statement.funId }}({%- for act in statement.actuals -%}
        {%- if loop.is_last -%}
        {{- render_template("expression.tmpl", act) -}}
        {%- else -%}
        {{- render_template("expression.tmpl", act) -}}, {# -#}
        {%- endif -%}
    {%- endfor -%}
);{# -#}
{%- endif -%}
{% if typeId == "alias" %}
alias {{ statement.alias }} : {{ render_template("expression.tmpl", statement.expr) }} do
{% for stmt in statement.statements %}{{ render_template("statement.tmpl", stmt, 1) }}{% endfor %}

end;
{% endif %}